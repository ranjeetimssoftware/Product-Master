{"ast":null,"code":"import { NavigationStart } from \"@angular/router\";\nimport { Subject } from \"rxjs\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nexport let SpinnerService = /*#__PURE__*/(() => {\n  class SpinnerService {\n    constructor(router) {\n      this.router = router;\n      this.showHideSpinnerSubject = new Subject();\n      this.keepAfterNavigationChange = false; // clear alert message on route change\n\n      router.events.subscribe(event => {\n        if (event instanceof NavigationStart) {\n          if (this.keepAfterNavigationChange) {\n            // only keep for a single location change\n            this.keepAfterNavigationChange = false;\n            this.showHideSpinnerSubject.next(true);\n          } else {\n            // clear loading\n            this.showHideSpinnerSubject.next(false);\n          }\n        }\n      });\n    }\n\n    getSpinnerShowHide() {\n      return this.showHideSpinnerSubject.asObservable();\n    }\n\n    show(loadingMessage) {\n      this.showHideSpinnerSubject.next({\n        text: loadingMessage,\n        isLoading: true\n      });\n    }\n\n    hide() {\n      this.showHideSpinnerSubject.next({\n        text: \"\",\n        isLoading: false\n      });\n    }\n\n  }\n\n  SpinnerService.ɵfac = function SpinnerService_Factory(t) {\n    return new (t || SpinnerService)(i0.ɵɵinject(i1.Router));\n  };\n\n  SpinnerService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: SpinnerService,\n    factory: SpinnerService.ɵfac,\n    providedIn: 'root'\n  });\n  return SpinnerService;\n})();","map":null,"metadata":{},"sourceType":"module"}