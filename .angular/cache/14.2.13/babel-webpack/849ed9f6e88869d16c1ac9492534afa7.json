{"ast":null,"code":"import { AlternateUnit, Brand, Model, MultiStockLevel, Product, TBarcode } from \"./ProductItem\";\nimport { BehaviorSubject, Observable, Subject } from \"rxjs\";\nimport { GenericDialogComponent } from \"../shared/components/generic/generic-dialog/generic-dialog.component\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"../config.service\";\nimport * as i4 from \"@angular/material/dialog\";\nexport let ProductMasterService = /*#__PURE__*/(() => {\n  class ProductMasterService {\n    constructor(http, arouter, configService, dialog) {\n      this.http = http;\n      this.arouter = arouter;\n      this.configService = configService;\n      this.dialog = dialog;\n      this.searchItemList = [];\n      this.EXCEL_TYPE = 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;charset=UTF-8';\n      this.EXCEL_EXTENSION = '.xlsx';\n      this.PBarCodeList = [];\n      this.MultiStockList = [];\n      this.productObj = {};\n      this.pObj = {};\n      this.isrowClicked = false;\n      this.TempProductObj = {};\n      this.userProfile = {};\n      this.filterParameter = '';\n      this.selectedItems = new BehaviorSubject([]);\n      this.selectedItem$ = this.selectedItems.asObservable();\n      this.breadcrumbsSource = new BehaviorSubject([]);\n      this.breadcrumb$ = this.breadcrumbsSource.asObservable();\n      this._ItemList = [];\n      let settings = localStorage.getItem('setting');\n      this.userSetting = JSON.parse(settings);\n    }\n\n    get apiUrl() {\n      // let url = this.state.getGlobalSetting(\"apiUrl\");\n      let url = this.configService.getApiUrl();\n      let apiUrl = \"\";\n\n      if (!!url && url.length > 0) {\n        apiUrl = url;\n      }\n\n      ;\n      return apiUrl;\n    }\n\n    updateSelectedItems(items) {\n      this.selectedItems.next(items);\n    }\n\n    addBreadcrumb(label, url = '') {\n      const currentBreadcrumbs = this.breadcrumbsSource.value;\n\n      if (!currentBreadcrumbs.find(breadcrumb => breadcrumb.label === label)) {\n        this.breadcrumbsSource.next([...currentBreadcrumbs, {\n          label,\n          url\n        }]);\n      }\n    }\n\n    openSuccessDialog(Message) {\n      this.dialog.open(GenericDialogComponent, {\n        minWidth: '25rem',\n        data: {\n          Title: \"Information\",\n          Message: Message\n        }\n      });\n    }\n\n    openErrorDialog(Message) {\n      this.dialog.open(GenericDialogComponent, {\n        minWidth: '25rem',\n        data: {\n          Title: \"Error\",\n          Message: Message\n        }\n      });\n    }\n\n    getParentWiseProduct(BrandName) {\n      return this.http.get(this.apiUrl + '/getParentWiseProduct/' + BrandName);\n    }\n\n    getSearchProducts(searchkey) {\n      return this.http.get(this.apiUrl + '/getSearchProducts/' + searchkey);\n    }\n\n    getProductGroupTree() {\n      return this.http.get(this.apiUrl + '/getProductGroupTree');\n    }\n\n    getAutoGenerateMenuCode(MGROUP, PARENT, MCAT = '') {\n      let res = {\n        status: \"error\",\n        result: \"\"\n      };\n      let returnSubject = new Subject();\n      let newMCAT = encodeURIComponent(MCAT);\n      this.http.get(this.apiUrl + '/getNewMenucode/' + MGROUP + '/' + PARENT + '/' + newMCAT).subscribe(response => {\n        let data = response;\n\n        if (data['status'] == 'ok') {\n          returnSubject.next(data);\n          returnSubject.unsubscribe();\n        }\n      }, error => {\n        res.status = 'error';\n        res.result = error;\n        returnSubject.next(res);\n        returnSubject.unsubscribe();\n      });\n      return returnSubject;\n    }\n\n    getUniqueMCode() {\n      let res = {\n        status: \"error\",\n        result: \"\"\n      };\n      let returnSubject = new Subject();\n      this.http.get(this.apiUrl + '/getUniqueMcode').subscribe(response => {\n        let data = response;\n\n        if (data['status'] == 'ok') {\n          returnSubject.next(data);\n          returnSubject.unsubscribe();\n        }\n      }, error => {\n        res.status = 'error';\n        res.result = error;\n        returnSubject.next(res);\n        returnSubject.unsubscribe();\n      });\n      return returnSubject;\n    }\n\n    getColorGroup() {\n      return this.http.get(`${this.apiUrl}/getAllProductColorGroup`);\n    }\n\n    getUnits() {\n      return this.http.get(this.apiUrl + '/getUnits');\n    }\n\n    getPTypeList() {\n      return this.http.get(this.apiUrl + '/getPType');\n    }\n\n    getMCatList() {\n      return this.http.get(this.apiUrl + '/getMCatList');\n    }\n\n    getMCat1List() {\n      return this.http.get(this.apiUrl + '/getMCat1List');\n    }\n\n    getSalesInfo() {\n      return this.http.get(this.apiUrl + `/getDefaultAccountInProductMaster`);\n    }\n\n    getLocationList() {\n      return this.http.get(this.apiUrl + '/getLocationList');\n    }\n\n    saveProduct(mode, prodObj, RGLIST, PBarCodeCollection, BrandModelList, PMultipleRetailPrice, menuItemYields, AlternateUnits, p0) {\n      let res = {\n        status: 'error',\n        result: ''\n      };\n      let returnSubject = new Subject();\n      let hd = new Headers({\n        'Content-Type': 'application/json'\n      });\n      let bodyData = {\n        mode: mode,\n        data: {\n          product: prodObj,\n          rglist: RGLIST,\n          alternateunits: AlternateUnits,\n          bcodeList: PBarCodeCollection,\n          bmList: BrandModelList,\n          multipleretailpriceList: PMultipleRetailPrice,\n          menuItemYields: menuItemYields\n        }\n      };\n      let data = JSON.stringify(bodyData, undefined, 2);\n      this.http.post(this.apiUrl + '/saveProductMaster', bodyData).subscribe(data => {\n        let retData = data;\n\n        if (retData['status'] === 'ok') {\n          res.status = 'ok';\n          res.result = retData['result'];\n          returnSubject.next(res);\n          returnSubject.unsubscribe();\n        } else {\n          res.status = 'error1';\n          res.result = retData['result'];\n          returnSubject.next(res);\n          returnSubject.unsubscribe();\n        }\n      }, error => {\n        res.status = 'error2', res.result = error;\n        returnSubject.next(res);\n        returnSubject.unsubscribe();\n      });\n      return returnSubject;\n    }\n\n    getProduct(mcode) {\n      let res = {\n        status: \"error\",\n        result: \"\"\n      };\n      let returnSubject = new Subject();\n      this.http.get(this.apiUrl + '/getProduct/' + mcode).subscribe(response => {\n        let data = response;\n\n        if (data['status'] == 'ok') {\n          returnSubject.next(data);\n          returnSubject.unsubscribe();\n        } else {\n          returnSubject.next(data);\n          returnSubject.unsubscribe();\n        }\n      }, error => {\n        res.status = 'error';\n        res.result = error;\n        returnSubject.next(res);\n        returnSubject.unsubscribe();\n      });\n      return returnSubject;\n    }\n\n    getProductForEdit(mcode) {\n      let res = {\n        status: \"error\",\n        result: \"\"\n      };\n      let returnSubject = new Subject();\n      this.http.get(this.apiUrl + '/getProductByMcode/' + mcode).subscribe(response => {\n        let data = response;\n\n        if (data['status'] == 'ok') {\n          returnSubject.next(data);\n          returnSubject.unsubscribe();\n        } else {\n          returnSubject.next(data);\n          returnSubject.unsubscribe();\n        }\n      }, error => {\n        res.status = 'error';\n        res.result = error;\n        returnSubject.next(res);\n        returnSubject.unsubscribe();\n      });\n      return returnSubject;\n    }\n\n    getProductPriceForView(mcode) {\n      let res = {\n        status: \"error\",\n        result: \"\"\n      };\n      let returnSubject = new Subject();\n      this.http.get(this.apiUrl + '/getProductPriceByMcode/' + mcode).subscribe(response => {\n        let data = response;\n\n        if (data['status'] == 'ok') {\n          returnSubject.next(data);\n          returnSubject.unsubscribe();\n        } else {\n          returnSubject.next(data);\n          returnSubject.unsubscribe();\n        }\n      }, error => {\n        res.status = 'error';\n        res.result = error;\n        returnSubject.next(res);\n        returnSubject.unsubscribe();\n      });\n      return returnSubject;\n    }\n\n    getInitialValuesForNewProduct(mcode) {\n      let res = {\n        status: \"error\",\n        result: \"\"\n      };\n      let returnSubject = new Subject();\n      this.http.get(this.apiUrl + '/getInitialValuesForNewProduct/' + mcode).subscribe(response => {\n        let data = response;\n\n        if (data['status'] == 'ok') {\n          returnSubject.next(data);\n          returnSubject.unsubscribe();\n        } else {\n          returnSubject.next(data);\n          returnSubject.unsubscribe();\n        }\n      }, error => {\n        res.status = 'error';\n        res.result = error;\n        returnSubject.next(res);\n        returnSubject.unsubscribe();\n      });\n      return returnSubject;\n    }\n\n    saveBrand(brand) {\n      let res = {\n        status: \"error\",\n        result: \"\"\n      };\n      let returnSubject = new Subject();\n      let bodyData = brand;\n      this.http.post(this.apiUrl + \"/saveBrand\", bodyData).subscribe(data => {\n        let retData = data;\n\n        if (retData['status'] == \"ok\") {\n          res.status = \"ok\";\n          res.result = retData['result'];\n          returnSubject.next(res);\n          returnSubject.unsubscribe();\n        } else {\n          res.status = \"error1\";\n          res.result = retData['result'];\n          returnSubject.next(res);\n          returnSubject.unsubscribe();\n        }\n      }, error => {\n        res.status = \"error2\", res.result = error;\n        returnSubject.next(res);\n        returnSubject.unsubscribe();\n      });\n      return returnSubject;\n    }\n\n    saveModel(model) {\n      let res = {\n        status: \"error\",\n        result: \"\"\n      };\n      let returnSubject = new Subject();\n      let bodyData = model; // var  data = JSON.stringify(bodyData, undefined, 2);\n\n      this.http.post(this.apiUrl + \"/saveModel\", bodyData).subscribe(data => {\n        let retData = data;\n\n        if (retData['status'] == \"ok\") {\n          res.status = \"ok\";\n          res.result = retData['result'];\n          returnSubject.next(res);\n          returnSubject.unsubscribe();\n        } else {\n          res.status = \"error1\";\n          res.result = retData['result'];\n          returnSubject.next(res);\n          returnSubject.unsubscribe();\n        }\n      }, error => {\n        res.status = \"error2\", res.result = error;\n        returnSubject.next(res);\n        returnSubject.unsubscribe();\n      });\n      return returnSubject;\n    }\n\n    getListFromKey(url, key) {\n      let res = {\n        status: \"error\",\n        result: \"\"\n      };\n      let returnSubject = new Subject();\n      this.http.get(this.apiUrl + url + key).subscribe(response => {\n        let data = response;\n\n        if (data['status'] == 'ok') {\n          returnSubject.next(data);\n          returnSubject.unsubscribe();\n        } else {\n          returnSubject.next(data);\n          returnSubject.unsubscribe();\n        }\n      }, error => {\n        res.status = 'error';\n        res.result = error;\n        returnSubject.next(res);\n        returnSubject.unsubscribe();\n      });\n      return returnSubject;\n    }\n\n    getUploadFile(modal) {\n      let res = {\n        status: \"error\",\n        result: \"error\"\n      };\n      let returnSubject = new Subject();\n      let bodyData = modal;\n      this.http.post(this.apiUrl + \"/SaveImportMenuitemFile\", bodyData).subscribe(response => {\n        let data = response;\n\n        if (data['status'] == 'ok') {\n          returnSubject.next(data);\n          returnSubject.unsubscribe();\n        } else {\n          returnSubject.next(data);\n          returnSubject.unsubscribe();\n        }\n      }, error => {\n        res.status = 'error';\n        res.result = error;\n        returnSubject.next(res);\n        returnSubject.unsubscribe();\n      });\n      return returnSubject;\n    }\n\n    getMCATbyId(mcode) {\n      let res = {\n        status: \"error\",\n        result: \"\"\n      };\n      let returnSubject = new Subject();\n      this.http.get(this.apiUrl + '/getMCATbyId/' + mcode).subscribe(response => {\n        let data = response;\n\n        if (data['status'] == 'ok') {\n          returnSubject.next(data);\n          returnSubject.unsubscribe();\n        } else {\n          returnSubject.next(data);\n          returnSubject.unsubscribe();\n        }\n      }, error => {\n        res.status = 'error';\n        res.result = error;\n        returnSubject.next(res);\n        returnSubject.unsubscribe();\n      });\n      return returnSubject;\n    }\n\n    getMCAT1byId(mcode) {\n      let res = {\n        status: \"error\",\n        result: \"\"\n      };\n      let returnSubject = new Subject();\n      this.http.get(this.apiUrl + '/getMCAT1byId/' + mcode).subscribe(response => {\n        let data = response;\n\n        if (data['status'] == 'ok') {\n          returnSubject.next(data);\n          returnSubject.unsubscribe();\n        } else {\n          returnSubject.next(data);\n          returnSubject.unsubscribe();\n        }\n      }, error => {\n        res.status = 'error';\n        res.result = error;\n        returnSubject.next(res);\n        returnSubject.unsubscribe();\n      });\n      return returnSubject;\n    }\n\n    getRecMargin(mcode) {\n      let res = {\n        status: \"error\",\n        result: \"\"\n      };\n      let returnSubject = new Subject();\n      this.http.get(this.apiUrl + '/getRecMargin/' + mcode).subscribe(response => {\n        let data = response;\n\n        if (data['status'] == 'ok') {\n          returnSubject.next(data);\n          returnSubject.unsubscribe();\n        } else {\n          returnSubject.next(data);\n          returnSubject.unsubscribe();\n        }\n      }, error => {\n        res.status = 'error';\n        res.result = error;\n        returnSubject.next(res);\n        returnSubject.unsubscribe();\n      });\n      return returnSubject;\n    }\n\n    getFCodeFromTreeNode(mcode) {\n      let res = {\n        status: \"error\",\n        result: \"\"\n      };\n      let returnSubject = new Subject();\n      this.http.get(this.apiUrl + '/getFcodeFromTreeNode/' + mcode).subscribe(response => {\n        let data = response;\n\n        if (data['status'] == 'ok') {\n          returnSubject.next(data);\n          returnSubject.unsubscribe();\n        } else {\n          returnSubject.next(data);\n          returnSubject.unsubscribe();\n        }\n      }, error => {\n        res.status = 'error';\n        res.result = error;\n        returnSubject.next(res);\n        returnSubject.unsubscribe();\n      });\n      return returnSubject;\n    }\n\n    getECODE(mcode, fcode) {\n      let res = {\n        status: \"error\",\n        result: \"\"\n      };\n      let returnSubject = new Subject();\n      this.http.get(this.apiUrl + '/getMaxECode/' + mcode + '/' + fcode).subscribe(response => {\n        let data = response;\n\n        if (data['status'] == 'ok') {\n          returnSubject.next(data);\n          returnSubject.unsubscribe();\n        } else {\n          returnSubject.next(data);\n          returnSubject.unsubscribe();\n        }\n      }, error => {\n        res.status = 'error';\n        res.result = error;\n        returnSubject.next(res);\n        returnSubject.unsubscribe();\n      });\n      return returnSubject;\n    }\n\n    deleteMenuitem(mcode, isGroup) {\n      let res = {\n        status: \"error\",\n        result: \"\"\n      };\n      let returnSubject = new Subject();\n      this.http.get(this.apiUrl + '/DeleteProductMasterFromMCode/' + mcode + '/' + isGroup).subscribe(response => {\n        let data = response;\n\n        if (data['status'] == 'ok') {\n          returnSubject.next(data);\n          returnSubject.unsubscribe();\n        }\n      });\n      return returnSubject;\n    }\n\n    nullToZeroConverter(value) {\n      if (value === undefined || value == null || value === '' || value === 'Infinity' || value === 'NaN' || isNaN(parseFloat(value))) {\n        return 0;\n      }\n\n      return parseFloat(value);\n    }\n\n    getProductGroupListByID(GroupID, ParentID, HasChild, currentPage, maxResultCount, sortBy = '', filters = '') {\n      let res = {\n        status: \"error\",\n        result: \"\"\n      };\n      let returnSubject = new Subject();\n      let url = `/getPaginatedProductGroupListByID?ID=${GroupID}&PARENTID=${ParentID}&HASCHILD=${HasChild}&sortBy=${sortBy}&currentPage=${currentPage}&maxResultCount=${maxResultCount}`;\n\n      if (filters) {\n        url = `/getPaginatedProductGroupListByID?ID=${GroupID}&PARENTID=${ParentID}&HASCHILD=${HasChild}&sortBy=${sortBy}&currentPage=${currentPage}&maxResultCount=${maxResultCount}&filters=${filters}`;\n      }\n\n      this.http.get(this.apiUrl + url).subscribe(response => {\n        let data = response;\n\n        if (data['status'] == 'ok') {\n          returnSubject.next(data);\n          returnSubject.unsubscribe();\n        } else {\n          returnSubject.next(data);\n          returnSubject.unsubscribe();\n        }\n      }, error => {\n        res.status = 'error';\n        res.result = error;\n        returnSubject.next(res);\n        returnSubject.unsubscribe();\n      });\n      return returnSubject;\n    }\n\n    getProductListByID(GroupID, ParentID, HasChild, currentPage, maxResultCount, sortyBy = '', filters = '') {\n      let res = {\n        status: \"error\",\n        result: \"\"\n      };\n      let returnSubject = new Subject();\n      let url = `/getPaginatedProductListByID?ID=${GroupID}&PARENTID=${ParentID}&HASCHILD=${HasChild}&sortBy=${sortyBy}&currentPage=${currentPage}&maxResultCount=${maxResultCount}`;\n\n      if (filters && filters != \"\" && filters != null) {\n        console.log(\"filters1\", filters);\n        url = `/getPaginatedProductListByID?ID=${GroupID}&PARENTID=${ParentID}&HASCHILD=${HasChild}&sortBy=${sortyBy}&currentPage=${currentPage}&maxResultCount=${maxResultCount}&filters=${filters}`;\n      }\n\n      this.http.get(this.apiUrl + url).subscribe(response => {\n        let data = response;\n\n        if (data['status'] == 'ok') {\n          returnSubject.next(data);\n          returnSubject.unsubscribe();\n        } else {\n          returnSubject.next(data);\n          returnSubject.unsubscribe();\n        }\n      }, error => {\n        res.status = 'error';\n        res.result = error;\n        returnSubject.next(res);\n        returnSubject.unsubscribe();\n      });\n      return returnSubject;\n    }\n\n    getMCODEusingBCODE(BCODE) {\n      let res = {\n        status: \"error\",\n        result: \"\"\n      };\n      let returnSubject = new Subject();\n      let bodyData = {\n        ID: BCODE\n      };\n      this.http.post(this.apiUrl + '/getMCODEusingBCODE', bodyData).subscribe(response => {\n        let data = response;\n\n        if (data['status'] == 'ok') {\n          returnSubject.next(data);\n          returnSubject.unsubscribe();\n        } else {\n          returnSubject.next(data);\n          returnSubject.unsubscribe();\n        }\n      }, error => {\n        res.status = 'error';\n        res.result = error;\n        returnSubject.next(res);\n        returnSubject.unsubscribe();\n      });\n      return returnSubject;\n    }\n\n    getMCODEusingBARCODE(BCODE) {\n      let res = {\n        status: \"error\",\n        result: \"\"\n      };\n      let returnSubject = new Subject();\n      let bodyData = {\n        ID: BCODE\n      };\n      this.http.get(this.apiUrl + '/getMCODEusingBARCODE/' + BCODE).subscribe(response => {\n        let data = response;\n\n        if (data['status'] == 'ok') {\n          returnSubject.next(data);\n          returnSubject.unsubscribe();\n        } else {\n          returnSubject.next(data);\n          returnSubject.unsubscribe();\n        }\n      }, error => {\n        res.status = 'error';\n        res.result = error;\n        returnSubject.next(res);\n        returnSubject.unsubscribe();\n      });\n      return returnSubject;\n    }\n\n    getChildrenGrpAndItem(mcode) {\n      let res = {\n        status: \"error\",\n        result: \"\"\n      };\n      let returnSubject = new Subject();\n      this.http.get(this.apiUrl + '/getChildrenGrpAndItem/' + mcode).subscribe(response => {\n        let data = response;\n\n        if (data['status'] == 'ok') {\n          returnSubject.next(data);\n          returnSubject.unsubscribe();\n        } else {\n          returnSubject.next(data);\n          returnSubject.unsubscribe();\n        }\n      }, error => {\n        res.status = 'error';\n        res.result = error;\n        returnSubject.next(res);\n        returnSubject.unsubscribe();\n      });\n      return returnSubject;\n    }\n\n    getProductListByIDandDate(GroupID, ParentID, HasChild, sort) {\n      let res = {\n        status: \"error\",\n        result: \"\"\n      };\n      let returnSubject = new Subject();\n      let bodyData = {\n        ID: GroupID,\n        PARENTID: ParentID,\n        HASCHILD: HasChild,\n        sort: sort\n      };\n      this.http.post(this.apiUrl + '/getProductListByID', bodyData).subscribe(response => {\n        let data = response;\n\n        if (data['status'] == 'ok') {\n          returnSubject.next(data);\n          returnSubject.unsubscribe();\n        } else {\n          returnSubject.next(data);\n          returnSubject.unsubscribe();\n        }\n      }, error => {\n        res.status = 'error';\n        res.result = error;\n        returnSubject.next(res);\n        returnSubject.unsubscribe();\n      });\n      return returnSubject;\n    }\n\n    getProductGroupListByIDandDate(GroupID, ParentID, HasChild, sort) {\n      let res = {\n        status: \"error\",\n        result: \"\"\n      };\n      let returnSubject = new Subject();\n      let bodyData = {\n        ID: GroupID,\n        PARENTID: ParentID,\n        HASCHILD: HasChild,\n        sort: sort\n      };\n      this.http.post(this.apiUrl + '/getProductGroupListByID', bodyData).subscribe(response => {\n        let data = response;\n\n        if (data['status'] == 'ok') {\n          returnSubject.next(data);\n          returnSubject.unsubscribe();\n        } else {\n          returnSubject.next(data);\n          returnSubject.unsubscribe();\n        }\n      }, error => {\n        res.status = 'error';\n        res.result = error;\n        returnSubject.next(res);\n        returnSubject.unsubscribe();\n      });\n      return returnSubject;\n    }\n\n    updateBarcodeMapping(voucherno) {\n      return this.http.post(this.apiUrl + '/UpdateBarcodeMapping', voucherno);\n    }\n\n    checkDuplicateBarcode(barcode, mcode) {\n      if (mcode == undefined) {\n        mcode = \"null\";\n      }\n\n      let res = {\n        status: 'error',\n        result: \"\"\n      };\n      let returnSubject = new Subject();\n      this.http.get(this.apiUrl + '/checkDuplicateBarcode/' + barcode + '/' + mcode).subscribe(response => {\n        let data = response;\n\n        if (data['status'] == 'ok') {\n          returnSubject.next(data);\n          returnSubject.unsubscribe();\n        } else {\n          returnSubject.next(data);\n          returnSubject.unsubscribe();\n        }\n      }, error => {\n        res.status = 'error';\n        res.result = error;\n        returnSubject.next(res);\n        returnSubject.unsubscribe();\n      });\n      return returnSubject;\n    }\n\n    getMainGroupList() {\n      let res = {\n        status: 'error',\n        result: \"\"\n      };\n      let returnSubject = new Subject();\n      this.http.get(this.apiUrl + '/getMainGroupList').subscribe(response => {\n        let data = response;\n\n        if (data['status'] == 'ok') {\n          returnSubject.next(data);\n          returnSubject.unsubscribe();\n        } else {\n          returnSubject.next(data);\n          returnSubject.unsubscribe();\n        }\n      }, error => {\n        res.status = 'error';\n        res.result = error;\n        returnSubject.next(res);\n        returnSubject.unsubscribe();\n      });\n      return returnSubject;\n    }\n\n    getSubGroupList(groupID) {\n      let res = {\n        status: \"error\",\n        result: \"\"\n      };\n      let returnSubject = new Subject();\n      this.http.get(this.apiUrl + '/getSubGroupList?SELECTEDGROUPID=' + groupID).subscribe(response => {\n        let data = response;\n\n        if (data['status'] == 'ok') {\n          returnSubject.next(data);\n          returnSubject.unsubscribe();\n        } else {\n          returnSubject.next(data);\n          returnSubject.unsubscribe();\n        }\n      }, error => {\n        res.status = 'error2';\n        res.result = error;\n        returnSubject.next(res);\n        returnSubject.unsubscribe();\n      });\n      return returnSubject;\n    }\n\n    getProductInfo(groupID) {\n      let res = {\n        status: \"error\",\n        result: \"\"\n      };\n      let returnSubject = new Subject();\n      this.http.get(this.apiUrl + '/getProductInfo?GROUPID=' + groupID).subscribe(response => {\n        let data = response;\n\n        if (data['status'] == 'ok') {\n          returnSubject.next(data);\n          returnSubject.unsubscribe();\n        } else {\n          returnSubject.next(data);\n          returnSubject.unsubscribe();\n        }\n      }, error => {\n        res.status = 'error2';\n        res.result = error;\n        returnSubject.next(res);\n        returnSubject.unsubscribe();\n      });\n      return returnSubject;\n    }\n\n    getGroupHierarchy(groupID) {\n      let res = {\n        status: \"error\",\n        result: \"\"\n      };\n      let returnSubject = new Subject();\n      this.http.get(this.apiUrl + '/getGroupHierarchy?GROUPID=' + groupID).subscribe(response => {\n        let data = response;\n\n        if (data['status'] == 'ok') {\n          returnSubject.next(data);\n          returnSubject.unsubscribe();\n        } else {\n          returnSubject.next(data);\n          returnSubject.unsubscribe();\n        }\n      }, error => {\n        res.status = 'error2';\n        res.result = error;\n        returnSubject.next(res);\n        returnSubject.unsubscribe();\n      });\n      return returnSubject;\n    }\n\n    getAcList() {\n      return this.http.get(this.apiUrl + '/getAcList');\n    }\n\n    checkProductTransaction(groupID) {\n      let res = {\n        status: \"error\",\n        result: \"\"\n      };\n      let returnSubject = new Subject();\n      this.http.get(this.apiUrl + '/checkProductTransaction?GROUPID=' + groupID).subscribe(response => {\n        let data = response;\n\n        if (data['status'] == 'ok') {\n          returnSubject.next(data);\n          returnSubject.unsubscribe();\n        } else {\n          returnSubject.next(data);\n          returnSubject.unsubscribe();\n        }\n      }, error => {\n        res.status = 'error2';\n        res.result = error;\n        returnSubject.next(res);\n        returnSubject.unsubscribe();\n      });\n      return returnSubject;\n    }\n\n    validateAltUnitInProductMaster(mcode, altunit, mode) {\n      return this.http.get(this.apiUrl + `/ValidateAltUnit?mcode=${mcode}&altunit=${altunit}&mode=${mode}`);\n    }\n\n    getKOTCategory() {\n      return this.http.get(this.apiUrl + '/getKOTCategory');\n    }\n\n    getCurrencyMaster() {\n      return this.http.get(this.apiUrl + '/getCurrencyMaster');\n    }\n\n  }\n\n  ProductMasterService.ɵfac = function ProductMasterService_Factory(t) {\n    return new (t || ProductMasterService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.ActivatedRoute), i0.ɵɵinject(i3.ConfigService), i0.ɵɵinject(i4.MatDialog));\n  };\n\n  ProductMasterService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ProductMasterService,\n    factory: ProductMasterService.ɵfac,\n    providedIn: 'root'\n  });\n  return ProductMasterService;\n})();","map":null,"metadata":{},"sourceType":"module"}